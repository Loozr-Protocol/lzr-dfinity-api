type Value = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type TxIndex__1 = nat;
type TxIndex = nat;
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: TxIndex;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: Balance__1;};
   BadFee: record {expected_fee: Balance__1;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: Balance__1;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArgs = 
 record {
   amount: Balance__1;
   created_at_time: opt nat64;
   fee: opt Balance__1;
   from_subaccount: opt Subaccount;
   memo: opt blob;
   to: Account__1;
 };
type Transfer = 
 record {
   amount: Balance__1;
   created_at_time: opt nat64;
   fee: opt Balance__1;
   from: Account__1;
   memo: opt blob;
   to: Account__1;
 };
type Transaction__1 = 
 record {
   burn: opt Burn;
   index: TxIndex;
   kind: text;
   mint: opt Mint;
   timestamp: Timestamp;
   transfer: opt Transfer;
 };
type TransactionRange = record {transactions: vec Transaction;};
type Transaction = 
 record {
   burn: opt Burn;
   index: TxIndex;
   kind: text;
   mint: opt Mint;
   timestamp: Timestamp;
   transfer: opt Transfer;
 };
type Token = 
 service {
   burn: (BurnArgs) -> (TransferResult);
   deposit_cycles: () -> ();
   get_transaction: (TxIndex__1) -> (opt Transaction__1);
   get_transactions: (GetTransactionsRequest) ->
    (GetTransactionsResponse) query;
   icrc1_balance_of: (Account) -> (Balance) query;
   icrc1_decimals: () -> (nat8) query;
   icrc1_fee: () -> (Balance) query;
   icrc1_metadata: () -> (vec MetaDatum) query;
   icrc1_minting_account: () -> (opt Account) query;
   icrc1_name: () -> (text) query;
   icrc1_supported_standards: () -> (vec SupportedStandard) query;
   icrc1_symbol: () -> (text) query;
   icrc1_total_supply: () -> (Balance) query;
   icrc1_transfer: (TransferArgs) -> (TransferResult);
   mint: (principal, Balance) -> (TransferResult);
 };
type Timestamp = nat64;
type SupportedStandard = 
 record {
   name: text;
   url: text;
 };
type Subaccount = blob;
type QueryArchiveFn = func (GetTransactionsRequest__1) ->
                       (TransactionRange) query;
type Mint = 
 record {
   amount: Balance__1;
   created_at_time: opt nat64;
   memo: opt blob;
   to: Account__1;
 };
type MetaDatum = 
 record {
   text;
   Value;
 };
type GetTransactionsResponse = 
 record {
   archived_transactions: vec ArchivedTransaction;
   first_index: TxIndex;
   log_length: nat;
   transactions: vec Transaction;
 };
type GetTransactionsRequest__1 = 
 record {
   length: nat;
   start: TxIndex;
 };
type GetTransactionsRequest = 
 record {
   length: nat;
   start: TxIndex;
 };
type BurnArgs = 
 record {
   amount: Balance__1;
   created_at_time: opt nat64;
   from_subaccount: opt Subaccount;
   memo: opt blob;
 };
type Burn = 
 record {
   amount: Balance__1;
   created_at_time: opt nat64;
   from: Account__1;
   memo: opt blob;
 };
type Balance__1 = nat;
type Balance = nat;
type ArchivedTransaction = 
 record {
   callback: QueryArchiveFn;
   length: nat;
   start: TxIndex;
 };
type Account__1 = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : (text, text, Account) -> Token
